{"version":3,"sources":["../../../src/migrations/seeds/2-example-org.ts"],"sourcesContent":["import { faker } from '@faker-js/faker';\nimport type knex from 'knex';\nimport type {\n  BusinessId,\n  DealId,\n  DealStatusId,\n  NewBusiness,\n  NewBusinessUser,\n  NewDeal,\n  NewDealUser,\n  NewOrganization,\n  NewOrganizationBusiness,\n  NewOrganizationUser,\n  NewProperty,\n  NewTask,\n  NewUser,\n  OrganizationId,\n  PropertyType,\n  TaskId,\n  TaskPriorityId,\n  TaskStatusId,\n  UserId,\n} from '@repo/postgres-types';\nimport type {\n  NewOpportunity,\n  OpportunityId,\n} from '@repo/postgres-types/src/TenantBaseOrg/Opportunity';\n\nimport { ORG_SCHEMAS } from '../migrate';\n\nconst refDate = new Date(2024, 9, 9);\n\nconst range = (n: number) => Array.from({ length: n }, (_, index) => index);\n\nexport async function seed(knex: knex.Knex): Promise<void> {\n  /* Insert Public Records */\n  await knex('public.user')\n    .returning(['id'])\n    .insert<{ id: UserId }[]>([\n      {\n        clerk_id: 'user_2knzyrM6qHCsCDd1vIh6lKc7JpD',\n        email: 'test@test.com',\n        name: 'username',\n        phone: null,\n      },\n    ] satisfies NewUser[]);\n\n  const userIds = await knex('public.user')\n    .returning(['id'])\n    .insert<{ id: UserId }[]>(\n      range(200).map(() => ({\n        clerk_id: crypto.randomUUID(),\n        credit_score: faker.number.int({\n          max: 820,\n          min: 380,\n        }),\n        date_of_birth: faker.date.birthdate(),\n        email: faker.internet.email(),\n        name: faker.person.fullName(),\n        phone: faker.phone.number(),\n        ssn: faker.string.numeric(9),\n      })) satisfies NewUser[]\n    );\n\n  const businessIds = await knex('public.business')\n    .returning(['id'])\n    .insert<{ id: BusinessId }[]>(\n      range(200).map(() => ({\n        business_type: faker.company.buzzNoun(),\n        date_business_began: new Date(faker.date.birthdate()),\n        dba: `DBA_${faker.string.numeric(6)}`,\n        debt: faker.number.int({\n          max: 10_000_000,\n          min: 100_000,\n        }),\n        duns: faker.string.numeric(9),\n        email: faker.internet.email(),\n        industry: faker.commerce.department(),\n        name_display: faker.company.name(),\n        name_legal: faker.company.name(),\n        phone: faker.phone.number(),\n        revenue_average: faker.number.int({\n          max: 10_000_000,\n          min: 100_000,\n        }),\n        tin: faker.string.numeric(9),\n      })) satisfies NewBusiness[]\n    );\n\n  const orgIds = await knex('public.organization')\n    .returning('id')\n    .insert<{ id: OrganizationId }[]>([\n      {\n        clerk_id: 'org_2ko38RckCbvGDqbOE3WO4XXpjKP',\n        id: 'tenant_base_org' as OrganizationId,\n        name: 'Testing Org',\n      },\n    ] satisfies NewOrganization[]);\n\n  await knex('public.organization_user').insert(\n    userIds.flatMap(\n      ({ id: user_id }) =>\n        orgIds.map(({ id: organization_id }) => ({\n          organization_id,\n          user_id,\n        })) satisfies NewOrganizationUser[]\n    )\n  );\n\n  await knex('public.organization_business').insert(\n    businessIds.flatMap(\n      ({ id: business_id }) =>\n        orgIds.map(({ id: organization_id }) => ({\n          business_id,\n          organization_id,\n        })) satisfies NewOrganizationBusiness[]\n    )\n  );\n\n  // ERandomly ad 1-4 users to each business\n  await knex('public.business_user').insert(\n    businessIds.flatMap(({ id: business_id }) => {\n      const numberOfBusinessUsers = Math.floor(Math.random() * 4) + 1;\n      const users = new Set<UserId>();\n      for (let index = 0; index < numberOfBusinessUsers; index++) {\n        users.add(userIds[Math.floor(Math.random() * userIds.length)]!.id);\n      }\n      return Array.from(users).map(user_id => ({\n        business_id,\n        expense_average_monthly: faker.number.int({\n          max: 15_000,\n          min: 2000,\n        }),\n        income_average_monthly: faker.number.int({\n          max: 50_000,\n          min: 5000,\n        }),\n        job_title: faker.person.jobTitle(),\n        owernship: faker.number.int({\n          max: 100,\n          min: 0,\n        }),\n        user_id,\n      })) satisfies NewBusinessUser[];\n    })\n  );\n\n  /* Insert Org Records */\n  const statusRecords = await Promise.all(\n    ORG_SCHEMAS.map(schema => {\n      return knex(`${schema}.deal_status`).select<{ id: DealStatusId }[]>([\n        'id',\n      ]);\n    })\n  );\n\n  const opportunities = await Promise.all(\n    ORG_SCHEMAS.map((schema, index) => {\n      faker.seed(index);\n\n      return knex(`${schema}.opportunity`)\n        .returning('id')\n        .insert<{ id: OpportunityId }[]>(\n          range(500).map(\n            () =>\n              ({\n                id: faker.string.uuid() as OpportunityId,\n                assignee_id: faker.helpers.arrayElement(userIds).id,\n                created_by_id: faker.helpers.arrayElement(userIds).id,\n                label: faker.number.int({\n                  max: 1,\n                  min: 0,\n                })\n                  ? faker.lorem.word()\n                  : null,\n                borrower_business_id:\n                  faker.helpers.arrayElement(businessIds).id,\n                borrower_id: faker.helpers.arrayElement(userIds).id,\n              }) satisfies NewOpportunity\n          )\n        );\n    })\n  );\n\n  const deals = await Promise.all(\n    ORG_SCHEMAS.map((schema, index) => {\n      faker.seed(index);\n\n      return knex(`${schema}.deal`)\n        .returning('id')\n        .insert<{ id: DealId }[]>(\n          range(500).map(\n            (_, dealIndex) =>\n              ({\n                appetite: faker.number.int({\n                  max: 100,\n                  min: 0,\n                }),\n                opportunity_id: opportunities[index]![dealIndex]!.id,\n                created_by_id: faker.helpers.arrayElement(userIds).id,\n                interest_rate: faker.number\n                  .float({\n                    fractionDigits: 6,\n                    max: 0.07,\n                    min: 0.035,\n                  })\n                  .toFixed(4),\n                loan_amount: faker.number\n                  .float({\n                    max: 10_000_000,\n                    min: 100_000,\n                  })\n                  .toFixed(2),\n                loan_processing_fee: faker.number\n                  .float({\n                    fractionDigits: 2,\n                    max: 3000,\n                    min: 15,\n                  })\n                  .toFixed(2),\n                source: faker.lorem.word(),\n                ssbs_score: faker.number.int({\n                  max: 1000,\n                  min: 500,\n                }),\n                status_id: faker.helpers.arrayElement(\n                  statusRecords[index]!.map(s => s.id)\n                ),\n                winnability: faker.number.int({\n                  max: 100,\n                  min: 0,\n                }),\n              }) satisfies NewDeal\n          )\n        );\n    })\n  );\n\n  await Promise.all(\n    deals.map((dealList, schemaIndex) =>\n      knex(`${ORG_SCHEMAS[schemaIndex]}.deal_user`)\n        .returning('id')\n        .insert<{ id: DealId }[]>(\n          dealList.flatMap(deal =>\n            range(\n              faker.number.int({\n                max: 20,\n                min: 1,\n              })\n            ).map(\n              () =>\n                ({\n                  deal_id: deal.id,\n                  user_id: faker.helpers.arrayElement(userIds).id,\n                }) satisfies NewDealUser\n            )\n          )\n        )\n    )\n  );\n\n  await Promise.all(\n    ORG_SCHEMAS.map(async (schema, index) => {\n      faker.seed(index);\n\n      return knex(`${schema}.property`)\n        .returning('id')\n        .insert(\n          range(100).map(\n            (_, index_) =>\n              ({\n                amenities: faker.helpers.arrayElements([\n                  'commercial',\n                  'residential',\n                ] as PropertyType[]),\n                area_sq_km: faker.number.int({ max: 80, min: 1 }),\n                deal_id: deals[index]![index_]!.id,\n                description: faker.lorem.lines(),\n                is_condo: faker.datatype.boolean(),\n                last_census_at: faker.date\n                  .past({ refDate, years: 80 })\n                  .toDateString(),\n                submitted_at: faker.date\n                  .past({ refDate, years: 1 })\n                  .toDateString(),\n                tags: faker.lorem.words(3).split(' '),\n                type: faker.helpers.arrayElement([\n                  'commercial',\n                  'residential',\n                ] as PropertyType[]),\n                year_built: faker.date\n                  .past({ refDate, years: 60 })\n                  .getFullYear(),\n              }) satisfies NewProperty\n          )\n        );\n    })\n  );\n\n  await Promise.all(\n    ORG_SCHEMAS.map(async (schema, index) => {\n      faker.seed(index);\n\n      const taskStatuses = await knex(`${schema}.task_status`).select<\n        {\n          id: TaskStatusId;\n        }[]\n      >('id');\n\n      const taskPriorities = await knex(`${schema}.task_priority`).select<\n        {\n          id: TaskPriorityId;\n        }[]\n      >('id');\n\n      return knex(`${schema}.task`)\n        .returning('id')\n        .insert<{ id: TaskId }[]>(\n          range(200).map(\n            () =>\n              ({\n                assignee_id: faker.helpers.arrayElement(userIds).id,\n                created_at: faker.date\n                  .past({ refDate, years: 1 })\n                  .toDateString(),\n                deal_id: faker.helpers.arrayElement(\n                  deals[index]!.map(d => d.id)\n                ),\n                description: faker.lorem.lines({\n                  max: 12,\n                  min: 1,\n                }),\n                priority_id: faker.helpers.arrayElement(\n                  taskPriorities.map(p => p.id)\n                ),\n                status_id: faker.helpers.arrayElement(\n                  taskStatuses.map(s => s.id)\n                ),\n                title: faker.lorem.lines(1),\n                updated_at: faker.date\n                  .past({ refDate, years: 1 })\n                  .toDateString(),\n              }) satisfies NewTask\n          )\n        );\n    })\n  );\n}\n"],"names":["seed","refDate","Date","range","n","Array","from","length","_","index","knex","returning","insert","clerk_id","email","name","phone","userIds","map","crypto","randomUUID","credit_score","faker","number","int","max","min","date_of_birth","date","birthdate","internet","person","fullName","ssn","string","numeric","businessIds","business_type","company","buzzNoun","date_business_began","dba","debt","duns","industry","commerce","department","name_display","name_legal","revenue_average","tin","orgIds","id","flatMap","user_id","organization_id","business_id","numberOfBusinessUsers","Math","floor","random","users","Set","add","expense_average_monthly","income_average_monthly","job_title","jobTitle","owernship","statusRecords","Promise","all","ORG_SCHEMAS","schema","select","opportunities","uuid","assignee_id","helpers","arrayElement","created_by_id","label","lorem","word","borrower_business_id","borrower_id","deals","dealIndex","appetite","opportunity_id","interest_rate","float","fractionDigits","toFixed","loan_amount","loan_processing_fee","source","ssbs_score","status_id","s","winnability","dealList","schemaIndex","deal","deal_id","index_","amenities","arrayElements","area_sq_km","description","lines","is_condo","datatype","boolean","last_census_at","past","years","toDateString","submitted_at","tags","words","split","type","year_built","getFullYear","taskStatuses","taskPriorities","created_at","d","priority_id","p","title","updated_at"],"mappings":"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"}