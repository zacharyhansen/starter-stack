{"version":3,"sources":["../../src/migrations/migrate.ts"],"sourcesContent":["import Knex from 'knex';\n\nimport configOrganization from './knexFiles/oganization';\nimport configPublic from './knexFiles/public';\nimport type { environments } from './knexFiles/utils';\n\nexport const ORG_SCHEMAS = [\n  'tenant_base_org',\n  'tenant_orgexample_uat',\n  'tenant_orgexample_prod',\n];\n\nconst knownMigrationTypes = new Set([\n  'latest',\n  'rollback',\n  'up',\n  'down',\n  'list',\n]);\n\nconst myArguments = process.argv.slice(2);\nconst migrationType = myArguments[0];\nconst target = myArguments[1];\n// eslint-disable-next-line no-console\nconsole.log({ migrationType, target });\n\nasync function migratePublic() {\n  const databaseConnection = configPublic[process.env.NODE_ENV as environments];\n  const knexConnectionPublic = Knex(databaseConnection);\n\n  // eslint-disable-next-line no-console\n  console.log(`master migrations (${migrationType}) started...`);\n\n  let promise;\n  switch (migrationType) {\n    case 'latest': {\n      promise = knexConnectionPublic.migrate.latest();\n      break;\n    }\n    case 'rollback': {\n      promise = knexConnectionPublic.migrate.rollback();\n      break;\n    }\n    case 'up': {\n      promise = knexConnectionPublic.migrate.up();\n      break;\n    }\n    case 'down': {\n      promise = knexConnectionPublic.migrate.down();\n      break;\n    }\n    case 'list': {\n      promise = knexConnectionPublic.migrate.list();\n      break;\n    }\n  }\n  return promise\n    ?.then(() => {\n      // eslint-disable-next-line no-console\n      console.log(`master migrations (${migrationType}) completed!`);\n    })\n    .catch(error => {\n      console.error(error);\n      // eslint-disable-next-line unicorn/no-process-exit\n      process.exit(1);\n    })\n    .finally(() => {\n      knexConnectionPublic.destroy();\n    });\n}\n\nconst databaseConnection =\n  configOrganization[process.env.NODE_ENV as environments];\n\nasync function migrateOrganizations() {\n  return Promise.all(\n    ORG_SCHEMAS.map(async schemaName => {\n      // create decoy connection to ensure schema is created\n      const knexSchema = Knex(databaseConnection);\n      await knexSchema.raw(`CREATE SCHEMA IF NOT EXISTS ${schemaName}`);\n      knexSchema.destroy();\n\n      // create connection for migrations and set the custom schema where we want the org migs to go into\n      const knexConnectionOrg = Knex(databaseConnection).withUserParams({\n        schemaName,\n      });\n\n      let promise;\n      switch (migrationType) {\n        case 'latest': {\n          promise = knexConnectionOrg.migrate.latest({ schemaName });\n          break;\n        }\n        case 'rollback': {\n          promise = knexConnectionOrg.migrate.rollback({ schemaName });\n          break;\n        }\n        case 'up': {\n          promise = knexConnectionOrg.migrate.up({ schemaName });\n          break;\n        }\n        case 'down': {\n          promise = knexConnectionOrg.migrate.down({ schemaName });\n          break;\n        }\n        case 'list': {\n          promise = knexConnectionOrg.migrate.list({ schemaName });\n          break;\n        }\n      }\n      return promise\n        ?.then(() => {\n          // eslint-disable-next-line no-console\n          console.log(\n            `%s schema migrations (${migrationType}) completed!`,\n            schemaName\n          );\n        })\n        .catch(error => {\n          console.error(error);\n          console.error(\n            `%s schema migrations (${migrationType}) failed`,\n            schemaName\n          );\n        })\n        .finally(() => {\n          knexConnectionOrg.destroy();\n        });\n    })\n  );\n}\n\nasync function migrate() {\n  // TODO: Running seed command auto runs this file\n  if (migrationType === 'seed:run') return;\n  if (!knownMigrationTypes.has(migrationType ?? '')) {\n    console.error(\n      'Please add migrations command (latest, rollback, up, down, list)'\n    );\n    // eslint-disable-next-line unicorn/no-process-exit\n    process.exit(1);\n  }\n  switch (target) {\n    case undefined: {\n      await migratePublic();\n      await migrateOrganizations();\n\n      break;\n    }\n    case 'public': {\n      await migratePublic();\n\n      break;\n    }\n    case 'orgs': {\n      await migrateOrganizations();\n\n      break;\n    }\n    // No default\n  }\n  // eslint-disable-next-line no-console\n  console.info('Migration Complete');\n}\n\nmigrate();\n"],"names":["ORG_SCHEMAS","knownMigrationTypes","Set","myArguments","process","argv","slice","migrationType","target","console","log","migratePublic","databaseConnection","configPublic","env","NODE_ENV","knexConnectionPublic","Knex","promise","migrate","latest","rollback","up","down","list","then","catch","error","exit","finally","destroy","configOrganization","migrateOrganizations","Promise","all","map","schemaName","knexSchema","raw","knexConnectionOrg","withUserParams","has","undefined","info"],"mappings":";;;;+BAMaA;;;eAAAA;;;6DANI;oEAEc;+DACN;;;;;;AAGlB,MAAMA,cAAc;IACzB;IACA;IACA;CACD;AAED,MAAMC,sBAAsB,IAAIC,IAAI;IAClC;IACA;IACA;IACA;IACA;CACD;AAED,MAAMC,cAAcC,QAAQC,IAAI,CAACC,KAAK,CAAC;AACvC,MAAMC,gBAAgBJ,WAAW,CAAC,EAAE;AACpC,MAAMK,SAASL,WAAW,CAAC,EAAE;AAC7B,sCAAsC;AACtCM,QAAQC,GAAG,CAAC;IAAEH;IAAeC;AAAO;AAEpC,eAAeG;IACb,MAAMC,qBAAqBC,eAAY,CAACT,QAAQU,GAAG,CAACC,QAAQ,CAAiB;IAC7E,MAAMC,uBAAuBC,IAAAA,aAAI,EAACL;IAElC,sCAAsC;IACtCH,QAAQC,GAAG,CAAC,CAAC,mBAAmB,EAAEH,cAAc,YAAY,CAAC;IAE7D,IAAIW;IACJ,OAAQX;QACN,KAAK;YAAU;gBACbW,UAAUF,qBAAqBG,OAAO,CAACC,MAAM;gBAC7C;YACF;QACA,KAAK;YAAY;gBACfF,UAAUF,qBAAqBG,OAAO,CAACE,QAAQ;gBAC/C;YACF;QACA,KAAK;YAAM;gBACTH,UAAUF,qBAAqBG,OAAO,CAACG,EAAE;gBACzC;YACF;QACA,KAAK;YAAQ;gBACXJ,UAAUF,qBAAqBG,OAAO,CAACI,IAAI;gBAC3C;YACF;QACA,KAAK;YAAQ;gBACXL,UAAUF,qBAAqBG,OAAO,CAACK,IAAI;gBAC3C;YACF;IACF;IACA,OAAON,SACHO,KAAK;QACL,sCAAsC;QACtChB,QAAQC,GAAG,CAAC,CAAC,mBAAmB,EAAEH,cAAc,YAAY,CAAC;IAC/D,GACCmB,MAAMC,CAAAA;QACLlB,QAAQkB,KAAK,CAACA;QACd,mDAAmD;QACnDvB,QAAQwB,IAAI,CAAC;IACf,GACCC,QAAQ;QACPb,qBAAqBc,OAAO;IAC9B;AACJ;AAEA,MAAMlB,qBACJmB,oBAAkB,CAAC3B,QAAQU,GAAG,CAACC,QAAQ,CAAiB;AAE1D,eAAeiB;IACb,OAAOC,QAAQC,GAAG,CAChBlC,YAAYmC,GAAG,CAAC,OAAMC;QACpB,sDAAsD;QACtD,MAAMC,aAAapB,IAAAA,aAAI,EAACL;QACxB,MAAMyB,WAAWC,GAAG,CAAC,CAAC,4BAA4B,EAAEF,YAAY;QAChEC,WAAWP,OAAO;QAElB,mGAAmG;QACnG,MAAMS,oBAAoBtB,IAAAA,aAAI,EAACL,oBAAoB4B,cAAc,CAAC;YAChEJ;QACF;QAEA,IAAIlB;QACJ,OAAQX;YACN,KAAK;gBAAU;oBACbW,UAAUqB,kBAAkBpB,OAAO,CAACC,MAAM,CAAC;wBAAEgB;oBAAW;oBACxD;gBACF;YACA,KAAK;gBAAY;oBACflB,UAAUqB,kBAAkBpB,OAAO,CAACE,QAAQ,CAAC;wBAAEe;oBAAW;oBAC1D;gBACF;YACA,KAAK;gBAAM;oBACTlB,UAAUqB,kBAAkBpB,OAAO,CAACG,EAAE,CAAC;wBAAEc;oBAAW;oBACpD;gBACF;YACA,KAAK;gBAAQ;oBACXlB,UAAUqB,kBAAkBpB,OAAO,CAACI,IAAI,CAAC;wBAAEa;oBAAW;oBACtD;gBACF;YACA,KAAK;gBAAQ;oBACXlB,UAAUqB,kBAAkBpB,OAAO,CAACK,IAAI,CAAC;wBAAEY;oBAAW;oBACtD;gBACF;QACF;QACA,OAAOlB,SACHO,KAAK;YACL,sCAAsC;YACtChB,QAAQC,GAAG,CACT,CAAC,sBAAsB,EAAEH,cAAc,YAAY,CAAC,EACpD6B;QAEJ,GACCV,MAAMC,CAAAA;YACLlB,QAAQkB,KAAK,CAACA;YACdlB,QAAQkB,KAAK,CACX,CAAC,sBAAsB,EAAEpB,cAAc,QAAQ,CAAC,EAChD6B;QAEJ,GACCP,QAAQ;YACPU,kBAAkBT,OAAO;QAC3B;IACJ;AAEJ;AAEA,eAAeX;IACb,iDAAiD;IACjD,IAAIZ,kBAAkB,YAAY;IAClC,IAAI,CAACN,oBAAoBwC,GAAG,CAAClC,iBAAiB,KAAK;QACjDE,QAAQkB,KAAK,CACX;QAEF,mDAAmD;QACnDvB,QAAQwB,IAAI,CAAC;IACf;IACA,OAAQpB;QACN,KAAKkC;YAAW;gBACd,MAAM/B;gBACN,MAAMqB;gBAEN;YACF;QACA,KAAK;YAAU;gBACb,MAAMrB;gBAEN;YACF;QACA,KAAK;YAAQ;gBACX,MAAMqB;gBAEN;YACF;IAEF;IACA,sCAAsC;IACtCvB,QAAQkC,IAAI,CAAC;AACf;AAEAxB"}