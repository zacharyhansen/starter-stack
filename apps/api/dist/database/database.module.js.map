{"version":3,"sources":["../../src/database/database.module.ts"],"sourcesContent":["import { Global, Module } from '@nestjs/common';\nimport { CamelCasePlugin, PostgresDialect } from 'kysely';\nimport { ConfigService } from '@nestjs/config';\nimport { Pool } from 'pg';\n\nimport { Database } from './database';\n\nimport { fetchGCPSecrets } from '~/config/gcp-secrets/fetchSecrets';\n\n@Global()\n@Module({\n  exports: [Database],\n  providers: [\n    {\n      inject: [ConfigService],\n      provide: Database,\n      useFactory: async (configService: ConfigService) => {\n        if (configService.get('SECRET_SOURCE') === 'LOCAL') {\n          return new Database({\n            dialect: new PostgresDialect({\n              pool: new Pool({\n                database: process.env.DATABASE_NAME,\n                host: process.env.DATABASE_HOST,\n                password: process.env.DATABASE_PASSWORD,\n                port: Number.parseInt(process.env.DATABASE_PORT!.toString()),\n                user: process.env.DATABASE_USER,\n              }),\n            }),\n            plugins: [new CamelCasePlugin()],\n          });\n        }\n\n        const secrets = await fetchGCPSecrets();\n\n        return new Database({\n          dialect: new PostgresDialect({\n            pool: new Pool({\n              database: secrets.DATABASE_NAME,\n              host: secrets.DATABASE_HOST,\n              password: secrets.DATABASE_PASSWORD,\n              port: Number.parseInt(secrets.DATABASE_PORT!.toString()),\n              user: secrets.DATABASE_USER,\n            }),\n          }),\n          plugins: [new CamelCasePlugin()],\n        });\n      },\n    },\n  ],\n})\nexport class DbModule {}\n"],"names":["DbModule","exports","Database","providers","inject","ConfigService","provide","useFactory","configService","get","dialect","PostgresDialect","pool","Pool","database","process","env","DATABASE_NAME","host","DATABASE_HOST","password","DATABASE_PASSWORD","port","Number","parseInt","DATABASE_PORT","toString","user","DATABASE_USER","plugins","CamelCasePlugin","secrets","fetchGCPSecrets"],"mappings":";;;;+BAkDaA;;;eAAAA;;;wBAlDkB;wBACkB;wBACnB;oBACT;0BAEI;8BAEO;;;;;;;AA2CzB,IAAA,AAAMA,WAAN,MAAMA;AAAU;;;;QAvCrBC,SAAS;YAACC,kBAAQ;SAAC;QACnBC,WAAW;YACT;gBACEC,QAAQ;oBAACC,qBAAa;iBAAC;gBACvBC,SAASJ,kBAAQ;gBACjBK,YAAY,OAAOC;oBACjB,IAAIA,cAAcC,GAAG,CAAC,qBAAqB,SAAS;wBAClD,OAAO,IAAIP,kBAAQ,CAAC;4BAClBQ,SAAS,IAAIC,uBAAe,CAAC;gCAC3BC,MAAM,IAAIC,QAAI,CAAC;oCACbC,UAAUC,QAAQC,GAAG,CAACC,aAAa;oCACnCC,MAAMH,QAAQC,GAAG,CAACG,aAAa;oCAC/BC,UAAUL,QAAQC,GAAG,CAACK,iBAAiB;oCACvCC,MAAMC,OAAOC,QAAQ,CAACT,QAAQC,GAAG,CAACS,aAAa,CAAEC,QAAQ;oCACzDC,MAAMZ,QAAQC,GAAG,CAACY,aAAa;gCACjC;4BACF;4BACAC,SAAS;gCAAC,IAAIC,uBAAe;6BAAG;wBAClC;oBACF;oBAEA,MAAMC,UAAU,MAAMC,IAAAA,6BAAe;oBAErC,OAAO,IAAI9B,kBAAQ,CAAC;wBAClBQ,SAAS,IAAIC,uBAAe,CAAC;4BAC3BC,MAAM,IAAIC,QAAI,CAAC;gCACbC,UAAUiB,QAAQd,aAAa;gCAC/BC,MAAMa,QAAQZ,aAAa;gCAC3BC,UAAUW,QAAQV,iBAAiB;gCACnCC,MAAMC,OAAOC,QAAQ,CAACO,QAAQN,aAAa,CAAEC,QAAQ;gCACrDC,MAAMI,QAAQH,aAAa;4BAC7B;wBACF;wBACAC,SAAS;4BAAC,IAAIC,uBAAe;yBAAG;oBAClC;gBACF;YACF;SACD"}