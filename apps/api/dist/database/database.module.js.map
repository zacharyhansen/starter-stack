{"version":3,"sources":["../../src/database/database.module.ts"],"sourcesContent":["import { Global, Module } from '@nestjs/common';\nimport { PostgresDialect } from 'kysely';\nimport { ConfigService } from '@nestjs/config';\nimport { Pool } from 'pg';\n\nimport { Database } from './database';\n\nimport { fetchGCPSecrets } from '~/config/gcp-secrets/fetchSecrets';\n\n@Global()\n@Module({\n  exports: [Database, 'PoolReadOnly'],\n  providers: [\n    {\n      inject: [ConfigService],\n      provide: Database,\n      useFactory: async (configService: ConfigService) => {\n        console.log({ SECRET_SOURCE: configService.get('SECRET_SOURCE') });\n\n        if (\n          configService.get('SECRET_SOURCE') === 'LOCAL' ||\n          !configService.get('SECRET_SOURCE')\n        ) {\n          return new Database({\n            dialect: new PostgresDialect({\n              pool: new Pool({\n                database: process.env.DATABASE_NAME,\n                host: process.env.DATABASE_HOST,\n                password: process.env.DATABASE_PASSWORD,\n                port: Number.parseInt(process.env.DATABASE_PORT!.toString()),\n                user: process.env.DATABASE_USER,\n              }),\n            }),\n          });\n        }\n\n        const secrets = await fetchGCPSecrets();\n\n        return new Database({\n          dialect: new PostgresDialect({\n            pool: new Pool({\n              database: secrets.DATABASE_NAME,\n              host: secrets.DATABASE_HOST,\n              password: secrets.DATABASE_PASSWORD,\n              port: Number.parseInt(secrets.DATABASE_PORT!.toString()),\n              user: secrets.DATABASE_USER,\n            }),\n          }),\n        });\n      },\n    },\n    {\n      inject: [ConfigService],\n      provide: 'PoolReadOnly',\n      useFactory: async (configService: ConfigService) => {\n        console.log({ SECRET_SOURCE: configService.get('SECRET_SOURCE') });\n\n        if (\n          configService.get('SECRET_SOURCE') === 'LOCAL' ||\n          !configService.get('SECRET_SOURCE')\n        ) {\n          return new Pool({\n            database: process.env.DATABASE_NAME,\n            host: process.env.DATABASE_HOST,\n            password: process.env.DATABASE_PASSWORD,\n            port: Number.parseInt(process.env.DATABASE_PORT!.toString()),\n            user: process.env.DATABASE_USER,\n          });\n        }\n\n        const secrets = await fetchGCPSecrets();\n\n        return new Pool({\n          database: secrets.DATABASE_NAME,\n          host: secrets.DATABASE_HOST,\n          password: secrets.DATABASE_PASSWORD,\n          port: Number.parseInt(secrets.DATABASE_PORT!.toString()),\n          user: secrets.DATABASE_USER,\n        });\n      },\n    },\n  ],\n})\nexport class DatabaseModule {}\n"],"names":["DatabaseModule","exports","Database","providers","inject","ConfigService","provide","useFactory","configService","console","log","SECRET_SOURCE","get","dialect","PostgresDialect","pool","Pool","database","process","env","DATABASE_NAME","host","DATABASE_HOST","password","DATABASE_PASSWORD","port","Number","parseInt","DATABASE_PORT","toString","user","DATABASE_USER","secrets","fetchGCPSecrets"],"mappings":";;;;+BAmFaA;;;eAAAA;;;wBAnFkB;wBACC;wBACF;oBACT;0BAEI;8BAEO;;;;;;;AA4EzB,IAAA,AAAMA,iBAAN,MAAMA;AAAgB;;;;QAxE3BC,SAAS;YAACC,kBAAQ;YAAE;SAAe;QACnCC,WAAW;YACT;gBACEC,QAAQ;oBAACC,qBAAa;iBAAC;gBACvBC,SAASJ,kBAAQ;gBACjBK,YAAY,OAAOC;oBACjBC,QAAQC,GAAG,CAAC;wBAAEC,eAAeH,cAAcI,GAAG,CAAC;oBAAiB;oBAEhE,IACEJ,cAAcI,GAAG,CAAC,qBAAqB,WACvC,CAACJ,cAAcI,GAAG,CAAC,kBACnB;wBACA,OAAO,IAAIV,kBAAQ,CAAC;4BAClBW,SAAS,IAAIC,uBAAe,CAAC;gCAC3BC,MAAM,IAAIC,QAAI,CAAC;oCACbC,UAAUC,QAAQC,GAAG,CAACC,aAAa;oCACnCC,MAAMH,QAAQC,GAAG,CAACG,aAAa;oCAC/BC,UAAUL,QAAQC,GAAG,CAACK,iBAAiB;oCACvCC,MAAMC,OAAOC,QAAQ,CAACT,QAAQC,GAAG,CAACS,aAAa,CAAEC,QAAQ;oCACzDC,MAAMZ,QAAQC,GAAG,CAACY,aAAa;gCACjC;4BACF;wBACF;oBACF;oBAEA,MAAMC,UAAU,MAAMC,IAAAA,6BAAe;oBAErC,OAAO,IAAI/B,kBAAQ,CAAC;wBAClBW,SAAS,IAAIC,uBAAe,CAAC;4BAC3BC,MAAM,IAAIC,QAAI,CAAC;gCACbC,UAAUe,QAAQZ,aAAa;gCAC/BC,MAAMW,QAAQV,aAAa;gCAC3BC,UAAUS,QAAQR,iBAAiB;gCACnCC,MAAMC,OAAOC,QAAQ,CAACK,QAAQJ,aAAa,CAAEC,QAAQ;gCACrDC,MAAME,QAAQD,aAAa;4BAC7B;wBACF;oBACF;gBACF;YACF;YACA;gBACE3B,QAAQ;oBAACC,qBAAa;iBAAC;gBACvBC,SAAS;gBACTC,YAAY,OAAOC;oBACjBC,QAAQC,GAAG,CAAC;wBAAEC,eAAeH,cAAcI,GAAG,CAAC;oBAAiB;oBAEhE,IACEJ,cAAcI,GAAG,CAAC,qBAAqB,WACvC,CAACJ,cAAcI,GAAG,CAAC,kBACnB;wBACA,OAAO,IAAII,QAAI,CAAC;4BACdC,UAAUC,QAAQC,GAAG,CAACC,aAAa;4BACnCC,MAAMH,QAAQC,GAAG,CAACG,aAAa;4BAC/BC,UAAUL,QAAQC,GAAG,CAACK,iBAAiB;4BACvCC,MAAMC,OAAOC,QAAQ,CAACT,QAAQC,GAAG,CAACS,aAAa,CAAEC,QAAQ;4BACzDC,MAAMZ,QAAQC,GAAG,CAACY,aAAa;wBACjC;oBACF;oBAEA,MAAMC,UAAU,MAAMC,IAAAA,6BAAe;oBAErC,OAAO,IAAIjB,QAAI,CAAC;wBACdC,UAAUe,QAAQZ,aAAa;wBAC/BC,MAAMW,QAAQV,aAAa;wBAC3BC,UAAUS,QAAQR,iBAAiB;wBACnCC,MAAMC,OAAOC,QAAQ,CAACK,QAAQJ,aAAa,CAAEC,QAAQ;wBACrDC,MAAME,QAAQD,aAAa;oBAC7B;gBACF;YACF;SACD"}