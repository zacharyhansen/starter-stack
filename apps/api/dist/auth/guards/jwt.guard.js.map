{"version":3,"sources":["../../../src/auth/guards/jwt.guard.ts"],"sourcesContent":["import { clerkClient } from '@clerk/clerk-sdk-node';\nimport { type ExecutionContext, Injectable, Logger } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\n@Injectable()\nexport class JwtGuard {\n  private readonly logger = new Logger();\n\n  constructor(private reflector: Reflector) {}\n\n  getRequest(context: ExecutionContext) {\n    return context;\n  }\n\n  /** Override canActivate function.\n   * If decorated by Public then it is accessable otherwise we fall back to checking the request context\n   */\n  async canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride('public', [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (isPublic) {\n      return true;\n    }\n\n    try {\n      await clerkClient.verifyToken('need to fix');\n    } catch (error) {\n      this.logger.error(error);\n      return false;\n    }\n\n    return true;\n  }\n}\n"],"names":["JwtGuard","constructor","reflector","logger","Logger","getRequest","context","canActivate","isPublic","getAllAndOverride","getHandler","getClass","clerkClient","verifyToken","error"],"mappings":";;;;+BAKaA;;;eAAAA;;;8BALe;wBAC8B;sBAChC;;;;;;;;;;AAGnB,IAAA,AAAMA,WAAN,MAAMA;IAGXC,YAAY,AAAQC,SAAoB,CAAE;aAAtBA,YAAAA;aAFHC,SAAS,IAAIC,cAAM;IAEO;IAE3CC,WAAWC,OAAyB,EAAE;QACpC,OAAOA;IACT;IAEA;;GAEC,GACD,MAAMC,YAAYD,OAAyB,EAAE;QAC3C,MAAME,WAAW,IAAI,CAACN,SAAS,CAACO,iBAAiB,CAAC,UAAU;YAC1DH,QAAQI,UAAU;YAClBJ,QAAQK,QAAQ;SACjB;QAED,IAAIH,UAAU;YACZ,OAAO;QACT;QAEA,IAAI;YACF,MAAMI,yBAAW,CAACC,WAAW,CAAC;QAChC,EAAE,OAAOC,OAAO;YACd,IAAI,CAACX,MAAM,CAACW,KAAK,CAACA;YAClB,OAAO;QACT;QAEA,OAAO;IACT;AACF"}